# Daytona Environment MCP Tool

## Description

Intelligent development environment management with natural language workspace configuration and automation.

## Instructions

ðŸŽ¯ **LangSwarm's Intent-Based Tool Calling**

Describe your development environment needs and get optimized workspace configurations automatically.

**Preferred: Intent-Based Calling (LangSwarm USP)**
```json
{
  "tool": "daytona_environment",
  "intent": "Set up a Python development environment for a machine learning project with GPU support",
  "context": "data science, model training, cloud resources"
}
```

**Alternative: Direct Method Calling**
```json
{
  "tool": "daytona_environment",
  "method": "create_workspace",
  "params": {
    "name": "ml-project",
    "template": "python-gpu",
    "resources": {"gpu": true, "memory": "16GB"}
  }
}
```

**When to use:** Development setup, project initialization, environment configuration, team collaboration.

**Intent examples:**
- "Create a workspace for React development with testing tools"
- "Set up a secure environment for handling customer data"
- "Prepare a demo environment with sample data"

**Available operations:** create_workspace, configure_environment, manage_resources, setup_collaboration

### Standard MCP Protocol Methods

This tool supports standard MCP protocol for discovery and introspection:

**Discovery Methods:**
- `list_tools()` - Discover all available methods and their schemas
- `list_prompts()` - Find available agent prompts for workflows  
- `list_resources()` - See available files (template.md, agents.yaml, etc.)

**Execution Methods:**
- `call_tool(name, arguments)` - Execute any tool method by name
- `get_prompt(name, arguments)` - Get formatted prompts with variables
- `read_resource(uri)` - Access specific resource content

**Example Protocol Usage:**
```json
{
  "method": "list_tools",
  "params": {}
}
```
```json
{
  "method": "call_tool", 
  "params": {
    "name": "similarity_search",
    "arguments": {"query": "pricing", "limit": 5}
  }
}
```
**Pro tip:** Intent-based calls select optimal templates, configure resources, and set up integrations intelligently.


## Brief

Development environment management with intelligent intent processing for natural language workspace setup.
