#!/usr/bin/env python3
"""
Dynamic Forms MCP Tool Demo Script

This script demonstrates the capabilities of the simplified Dynamic Forms MCP tool,
showing how to generate JSON form schemas from YAML configuration files.

Run this script to see various form generation scenarios:
python demo_dynamic_forms.py
"""

import json
import time
from datetime import datetime
from pprint import pprint

from langswarm.mcp.tools.dynamic_forms.main import (
    DynamicFormsMCPTool,
    generate_form_schema,
    load_form_definitions,
    server
)

def print_section_header(title):
    """Print a formatted section header"""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")

def print_subsection_header(title):
    """Print a formatted subsection header"""
    print(f"\n{'-'*40}")
    print(f"  {title}")
    print(f"{'-'*40}")

def demo_tool_initialization():
    """Demonstrate tool initialization and basic properties"""
    print_section_header("DYNAMIC FORMS MCP TOOL INITIALIZATION")
    
    # Create tool instance
    tool = DynamicFormsMCPTool(
        identifier="demo-dynamic-forms",
        name="Demo Dynamic Forms Tool"
    )
    
    print(f"Tool Identifier: {tool.identifier}")
    print(f"Tool Name: {tool.name}")
    print(f"Tool Description: {tool.description}")
    print(f"MCP Tool Flag: {DynamicFormsMCPTool._is_mcp_tool}")
    print(f"Has MCP Server: {hasattr(tool, 'mcp_server')}")
    
    # Test helper methods
    print(f"Available Forms: {tool.get_available_forms()}")
    
    general_def = tool.get_form_definition("general")
    print(f"General Form Fields: {len(general_def['fields'])}")
    
    return tool

def demo_basic_form_generation():
    """Demonstrate basic form generation for all types"""
    print_section_header("BASIC FORM GENERATION")
    
    form_types = ["general", "ui", "ai", "system"]
    
    for form_type in form_types:
        print_subsection_header(f"Generating {form_type.upper()} Form")
        
        start_time = time.time()
        result = generate_form_schema(form_type=form_type)
        end_time = time.time()
        
        schema = result["form_schema"]
        print(f"✅ Form generated in {(end_time - start_time)*1000:.2f}ms")
        print(f"Form ID: {schema['form_id']}")
        print(f"Title: {schema['title']}")
        print(f"Description: {schema['description']}")
        print(f"Sections: {len(schema['sections'])}")
        
        # Show fields in first section
        if schema['sections']:
            section = schema['sections'][0]
            print(f"Fields in '{section['title']}': {len(section['fields'])}")
            for field in section['fields']:
                print(f"  - {field['label']} ({field['type']})")
        
        # Show metadata
        metadata = schema['metadata']
        print(f"Field Count: {metadata['field_count']}")
        print(f"Generated By: {metadata['generated_by']}")
        print(f"Version: {metadata['version']}")

def demo_form_with_context():
    """Demonstrate form generation with user context"""
    print_section_header("FORM GENERATION WITH USER CONTEXT")
    
    user_contexts = [
        {
            "user_id": "user123",
            "role": "admin",
            "preferences": ["dark_theme", "compact_layout"],
            "organization": "TechCorp"
        },
        {
            "user_id": "user456",
            "role": "user",
            "preferences": ["light_theme", "large_font"],
            "organization": "DesignStudio"
        },
        {
            "user_id": "user789",
            "role": "guest",
            "preferences": [],
            "organization": "Unknown"
        }
    ]
    
    for i, context in enumerate(user_contexts, 1):
        print_subsection_header(f"User Context Example {i}")
        
        result = generate_form_schema(
            form_type="ui",
            user_context=context
        )
        
        schema = result["form_schema"]
        print(f"User: {context['user_id']} ({context['role']})")
        print(f"Form Title: {schema['title']}")
        print(f"Context Preserved: {schema['user_context']['role']}")
        print(f"Generated At: {schema['created_at']}")

def demo_field_filtering():
    """Demonstrate field filtering capabilities"""
    print_section_header("FIELD FILTERING CAPABILITIES")
    
    # Test included fields
    print_subsection_header("Included Fields Filter")
    
    result = generate_form_schema(
        form_type="ui",
        included_fields=["theme", "font_size"]
    )
    
    schema = result["form_schema"]
    section = schema['sections'][0]
    field_ids = [field['id'] for field in section['fields']]
    
    print(f"Requested fields: ['theme', 'font_size']")
    print(f"Generated fields: {field_ids}")
    print(f"Fields match: {set(field_ids) == {'theme', 'font_size'}}")
    
    # Test excluded fields
    print_subsection_header("Excluded Fields Filter")
    
    result = generate_form_schema(
        form_type="ui",
        excluded_fields=["animations_enabled", "compact_mode"]
    )
    
    schema = result["form_schema"]
    section = schema['sections'][0]
    field_ids = [field['id'] for field in section['fields']]
    
    print(f"Excluded fields: ['animations_enabled', 'compact_mode']")
    print(f"Generated fields: {field_ids}")
    print(f"Excluded fields absent: {'animations_enabled' not in field_ids and 'compact_mode' not in field_ids}")
    
    # Test empty included fields
    print_subsection_header("Empty Included Fields")
    
    result = generate_form_schema(
        form_type="ui",
        included_fields=[]
    )
    
    schema = result["form_schema"]
    section = schema['sections'][0]
    
    print(f"Empty included_fields list")
    print(f"Generated fields: {len(section['fields'])}")
    print(f"Should be empty: {len(section['fields']) == 0}")

def demo_current_settings_prepopulation():
    """Demonstrate form pre-population with current settings"""
    print_section_header("FORM PRE-POPULATION WITH CURRENT SETTINGS")
    
    current_settings = {
        "theme": "dark",
        "font_size": 18,
        "robot_visibility": False,
        "animations_enabled": True,
        "compact_mode": True
    }
    
    print(f"Current Settings: {json.dumps(current_settings, indent=2)}")
    
    result = generate_form_schema(
        form_type="ui",
        current_settings=current_settings
    )
    
    schema = result["form_schema"]
    section = schema['sections'][0]
    
    print("\nPre-populated Field Values:")
    for field in section['fields']:
        field_id = field['id']
        if field_id in current_settings:
            print(f"  {field['label']}: {field['default_value']} (pre-populated)")
        else:
            print(f"  {field['label']}: {field.get('default_value', 'N/A')} (default)")

def demo_yaml_configuration():
    """Demonstrate YAML configuration loading"""
    print_section_header("YAML CONFIGURATION LOADING")
    
    forms, field_types = load_form_definitions()
    
    print(f"Available Forms: {list(forms.keys())}")
    print(f"Available Field Types: {list(field_types.keys())}")
    
    # Show structure of general form
    print_subsection_header("General Form Structure")
    general_form = forms["general"]
    print(f"Title: {general_form['title']}")
    print(f"Description: {general_form['description']}")
    print(f"Field Count: {len(general_form['fields'])}")
    
    for field in general_form['fields']:
        print(f"  - {field['id']}: {field['label']} ({field['type']})")
    
    # Show field type definitions
    print_subsection_header("Field Type Definitions")
    for field_type, definition in field_types.items():
        properties = definition.get('properties', [])
        required = definition.get('required_properties', [])
        print(f"  {field_type}: {len(properties)} properties, {len(required)} required")

def demo_llm_integration_patterns():
    """Demonstrate LLM integration patterns"""
    print_section_header("LLM INTEGRATION PATTERNS")
    
    # Simulate LLM requests
    llm_requests = [
        {
            "user_input": "I want to customize my theme settings",
            "expected_form": "ui",
            "expected_fields": ["theme", "font_size", "compact_mode"]
        },
        {
            "user_input": "Help me configure my account basics",
            "expected_form": "general",
            "expected_fields": ["display_name", "language", "timezone"]
        },
        {
            "user_input": "I need to set up AI response preferences",
            "expected_form": "ai",
            "expected_fields": ["response_style", "code_explanation_style"]
        }
    ]
    
    for i, request in enumerate(llm_requests, 1):
        print_subsection_header(f"LLM Request {i}")
        print(f"User Input: '{request['user_input']}'")
        print(f"Expected Form: {request['expected_form']}")
        
        # Generate form based on expected type
        result = generate_form_schema(
            form_type=request['expected_form'],
            user_context={"original_request": request['user_input']}
        )
        
        schema = result["form_schema"]
        section = schema['sections'][0]
        actual_fields = [field['id'] for field in section['fields']]
        
        print(f"Generated Form: {schema['form_type']}")
        print(f"Generated Fields: {actual_fields}")
        print(f"Contains Expected Fields: {all(field in actual_fields for field in request['expected_fields'])}")

def demo_mcp_server_integration():
    """Demonstrate MCP server integration"""
    print_section_header("MCP SERVER INTEGRATION")
    
    print(f"Server Name: {server.name}")
    print(f"Server Description: {server.description}")
    print(f"Local Mode: {server.local_mode}")
    
    # Test server task registration
    print_subsection_header("Server Tasks")
    print(f"Registered Tasks: {list(server.tasks.keys())}")
    
    for task_name, task_info in server.tasks.items():
        print(f"  - {task_name}: {task_info['description']}")
    
    # Test direct function calls (local mode)
    print_subsection_header("Direct Function Calls")
    
    start_time = time.time()
    result = generate_form_schema(form_type="general")
    end_time = time.time()
    
    print(f"Direct call completed in {(end_time - start_time)*1000:.2f}ms")
    print(f"Result type: {type(result)}")
    print(f"Has form_schema: {'form_schema' in result}")

def demo_field_type_showcase():
    """Demonstrate different field types available"""
    print_section_header("FIELD TYPE SHOWCASE")
    
    forms, field_types = load_form_definitions()
    
    # Collect examples of each field type
    field_examples = {}
    for form_name, form_def in forms.items():
        for field in form_def['fields']:
            field_type = field['type']
            if field_type not in field_examples:
                field_examples[field_type] = []
            field_examples[field_type].append({
                'form': form_name,
                'field': field
            })
    
    for field_type, examples in field_examples.items():
        print_subsection_header(f"Field Type: {field_type}")
        print(f"Examples found: {len(examples)}")
        
        for example in examples[:2]:  # Show first 2 examples
            field = example['field']
            print(f"  - {field['id']} ({example['form']} form)")
            print(f"    Label: {field['label']}")
            if 'options' in field:
                print(f"    Options: {len(field['options'])}")
            if 'min_value' in field:
                print(f"    Range: {field['min_value']} - {field['max_value']}")
            if 'default_value' in field:
                print(f"    Default: {field['default_value']}")

def demo_error_handling():
    """Demonstrate error handling scenarios"""
    print_section_header("ERROR HANDLING SCENARIOS")
    
    # Test invalid form type
    print_subsection_header("Invalid Form Type")
    try:
        generate_form_schema(form_type="invalid_type")
    except ValueError as e:
        print(f"✅ Caught expected error: {e}")
    
    # Test with non-existent included fields
    print_subsection_header("Non-existent Included Fields")
    result = generate_form_schema(
        form_type="ui",
        included_fields=["nonexistent_field"]
    )
    schema = result["form_schema"]
    section = schema['sections'][0]
    print(f"Non-existent field filtered out: {len(section['fields']) == 0}")
    
    # Test tool with invalid method
    print_subsection_header("Invalid Tool Method")
    tool = DynamicFormsMCPTool(
        identifier="test-tool",
        name="Test Tool"
    )
    
    result = tool.run({"method": "invalid_method"})
    print(f"✅ Invalid method handled gracefully: {'Unknown method' in result}")

def demo_performance_metrics():
    """Demonstrate performance metrics"""
    print_section_header("PERFORMANCE METRICS")
    
    # Test generation speed for different form types
    form_types = ["general", "ui", "ai", "system"]
    
    for form_type in form_types:
        print_subsection_header(f"Performance: {form_type.upper()}")
        
        # Multiple runs for average
        times = []
        for _ in range(10):
            start_time = time.time()
            result = generate_form_schema(form_type=form_type)
            end_time = time.time()
            times.append((end_time - start_time) * 1000)
        
        avg_time = sum(times) / len(times)
        min_time = min(times)
        max_time = max(times)
        
        print(f"Average: {avg_time:.2f}ms")
        print(f"Min: {min_time:.2f}ms")
        print(f"Max: {max_time:.2f}ms")
        
        # Check result size
        json_size = len(json.dumps(result))
        print(f"JSON Size: {json_size} bytes ({json_size/1024:.1f} KB)")

def demo_frontend_integration_examples():
    """Demonstrate frontend integration examples"""
    print_section_header("FRONTEND INTEGRATION EXAMPLES")
    
    # Generate a form and show frontend integration patterns
    result = generate_form_schema(form_type="ui")
    schema = result["form_schema"]
    
    print_subsection_header("React Integration Example")
    print("""
    // React component example
    function DynamicForm({ schema }) {
      const [formData, setFormData] = useState({});
      
      const handleChange = (fieldId, value) => {
        setFormData(prev => ({ ...prev, [fieldId]: value }));
      };
      
      return (
        <form>
          <h2>{schema.title}</h2>
          {schema.sections.map(section => (
            <div key={section.id}>
              <h3>{section.title}</h3>
              {section.fields.map(field => (
                <div key={field.id}>
                  <label>{field.label}</label>
                  {renderField(field, formData[field.id], handleChange)}
                </div>
              ))}
            </div>
          ))}
        </form>
      );
    }
    """)
    
    print_subsection_header("Vue Integration Example")
    print("""
    <!-- Vue component example -->
    <template>
      <form @submit.prevent="handleSubmit">
        <h2>{{ schema.title }}</h2>
        <div v-for="section in schema.sections" :key="section.id">
          <h3>{{ section.title }}</h3>
          <div v-for="field in section.fields" :key="field.id">
            <label>{{ field.label }}</label>
            <component 
              :is="getFieldComponent(field.type)"
              :field="field"
              v-model="formData[field.id]"
            />
          </div>
        </div>
        <button type="submit">Save</button>
      </form>
    </template>
    """)
    
    print_subsection_header("Generated Schema Structure")
    print(f"Form ID: {schema['form_id']}")
    print(f"Sections: {len(schema['sections'])}")
    print(f"Total Fields: {sum(len(section['fields']) for section in schema['sections'])}")
    
    # Show field types for frontend rendering
    section = schema['sections'][0]
    field_types = {}
    for field in section['fields']:
        field_type = field['type']
        if field_type not in field_types:
            field_types[field_type] = 0
        field_types[field_type] += 1
    
    print(f"Field Types: {field_types}")

def main():
    """Main demo function"""
    print("🚀 Dynamic Forms MCP Tool Demo")
    print("=" * 60)
    
    try:
        # Run all demos
        tool = demo_tool_initialization()
        demo_basic_form_generation()
        demo_form_with_context()
        demo_field_filtering()
        demo_current_settings_prepopulation()
        demo_yaml_configuration()
        demo_llm_integration_patterns()
        demo_mcp_server_integration()
        demo_field_type_showcase()
        demo_error_handling()
        demo_performance_metrics()
        demo_frontend_integration_examples()
        
        print_section_header("DEMO COMPLETED SUCCESSFULLY")
        print("✅ All dynamic forms features demonstrated")
        print("✅ Tool is ready for production use")
        print("✅ YAML configuration approach validated")
        print("✅ Pure JSON output confirmed")
        
    except Exception as e:
        print(f"\n❌ Demo failed with error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 