#!/usr/bin/env python3
"""
Test Script for Optional Dependencies System

Demonstrates how LangSwarm handles missing dependencies gracefully and provides
helpful error messages for users.
"""

import sys
from pathlib import Path

# Add the current directory to path for imports
sys.path.insert(0, str(Path(__file__).parent))

def test_optional_import_manager():
    """Test the optional import manager."""
    print("üß™ Testing Optional Import Manager")
    print("=" * 50)
    
    try:
        from langswarm.core.utils.optional_imports import optional_imports
        
        # Test available features
        features = optional_imports.get_available_features()
        print(f"‚úÖ Found {len(features)} feature groups")
        
        # Show summary
        print("\n" + optional_imports.get_missing_dependencies_summary())
        
    except Exception as e:
        print(f"‚ùå Failed to test optional imports: {e}")


def test_provider_registry():
    """Test the provider registry with optional dependencies."""
    print("\nü§ñ Testing Provider Registry")
    print("=" * 50)
    
    try:
        from langswarm.core.agents.provider_registry import provider_registry
        
        # List available providers
        available = provider_registry.list_available_providers()
        print(f"‚úÖ Available providers: {available}")
        
        # Show status summary
        print("\n" + provider_registry.get_provider_status_summary())
        
        # Test getting a provider that might not be available
        print("\nüîç Testing provider access...")
        
        # Try OpenAI (might be available)
        try:
            openai_provider = provider_registry.get_provider('openai')
            print("‚úÖ OpenAI provider available")
        except Exception as e:
            print(f"‚ÑπÔ∏è  OpenAI provider not available: {e}")
        
        # Try a provider that's likely not available
        try:
            fake_provider = provider_registry.get_provider('nonexistent')
            print("‚ùå This shouldn't happen - nonexistent provider found")
        except Exception as e:
            print("‚úÖ Correct error for nonexistent provider:")
            print(f"   {e}")
            
    except Exception as e:
        print(f"‚ùå Failed to test provider registry: {e}")


def test_memory_backends():
    """Test memory backend registry with optional dependencies."""
    print("\nüíæ Testing Memory Backend Registry")
    print("=" * 50)
    
    try:
        from langswarm.core.memory.enhanced_backends import memory_backend_registry
        
        # List available backends
        available = memory_backend_registry.list_available_backends()
        print(f"‚úÖ Available backends: {available}")
        
        # Show status summary
        print("\n" + memory_backend_registry.get_backend_status_summary())
        
        # Test getting backends
        print("\nüîç Testing backend access...")
        
        # SQLite should always be available
        try:
            sqlite_backend = memory_backend_registry.get_backend('sqlite')
            print("‚úÖ SQLite backend available (as expected)")
        except Exception as e:
            print(f"‚ùå SQLite backend failed: {e}")
        
        # Test a backend that might not be available
        try:
            redis_backend = memory_backend_registry.get_backend('redis')
            print("‚úÖ Redis backend available")
        except Exception as e:
            print("‚ÑπÔ∏è  Redis backend not available (as expected):")
            print(f"   {e}")
            
    except Exception as e:
        print(f"‚ùå Failed to test memory backends: {e}")


def test_configuration_with_missing_deps():
    """Test configuration loading with missing dependencies."""
    print("\n‚öôÔ∏è Testing Configuration with Missing Dependencies")
    print("=" * 50)
    
    # Create a test config that uses potentially missing dependencies
    import tempfile
    import os
    
    config_content = """
version: "2.0"
name: "Test Config with Optional Dependencies"

agents:
  - id: "openai_agent"
    provider: "openai"
    model: "gpt-3.5-turbo"
    system_prompt: "You are helpful"
  
  - id: "anthropic_agent"
    provider: "anthropic"
    model: "claude-3-sonnet-20240229"
    system_prompt: "You are helpful"

memory:
  backend: "redis"
  config:
    url: "redis://localhost:6379"

tools:
  - id: "filesystem"
    type: "mcp"
    local_mode: true
"""
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.yaml', delete=False) as f:
        f.write(config_content)
        config_file = f.name
    
    try:
        from langswarm.core.config import load_config
        
        print("üîç Attempting to load configuration with optional dependencies...")
        config = load_config(config_file)
        print("‚úÖ Configuration loaded successfully!")
        print(f"   Agents: {len(config.agents)}")
        print(f"   Memory backend: {config.memory.backend}")
        
    except Exception as e:
        print("‚ÑπÔ∏è  Configuration loading failed (as expected with missing deps):")
        print(f"   {e}")
        
    finally:
        os.unlink(config_file)


def test_minimal_functionality():
    """Test that core functionality works without optional dependencies."""
    print("\nüèÉ Testing Minimal Core Functionality")
    print("=" * 50)
    
    try:
        # Test basic imports
        import langswarm
        print("‚úÖ LangSwarm core imported")
        
        # Test configuration schema
        from langswarm.core.config.schema import LangSwarmConfig
        print("‚úÖ Configuration schema available")
        
        # Test error system
        from langswarm.core.errors import ConfigurationError
        print("‚úÖ Error system available")
        
        # Test optional import utilities
        from langswarm.core.utils.optional_imports import optional_import
        print("‚úÖ Optional import utilities available")
        
        print("\nüéâ Core functionality works without optional dependencies!")
        
    except Exception as e:
        print(f"‚ùå Core functionality test failed: {e}")


def show_installation_guidance():
    """Show installation guidance for users."""
    print("\nüì¶ Installation Guidance")
    print("=" * 50)
    
    print("üèÉ Minimal Installation (core only):")
    print("   pip install langswarm")
    print("   ‚Ä¢ Basic configuration and orchestration")
    print("   ‚Ä¢ SQLite memory backend")
    print("   ‚Ä¢ No AI providers (bring your own)")
    print()
    
    print("‚ö° Quick Start (with OpenAI):")
    print("   pip install langswarm[openai]")
    print("   ‚Ä¢ Core functionality + OpenAI provider")
    print("   ‚Ä¢ Perfect for getting started")
    print()
    
    print("üéØ Essential Setup (recommended):")
    print("   pip install langswarm[essential]")
    print("   ‚Ä¢ OpenAI provider + Redis memory + FastAPI")
    print("   ‚Ä¢ Good for development and light production")
    print()
    
    print("üè≠ Production Setup:")
    print("   pip install langswarm[production]")
    print("   ‚Ä¢ Multiple providers + cloud backends")
    print("   ‚Ä¢ Ready for production deployments")
    print()
    
    print("üåü Full Installation:")
    print("   pip install langswarm[all]")
    print("   ‚Ä¢ Everything included")
    print("   ‚Ä¢ All providers, backends, and integrations")


def main():
    """Run all tests."""
    print("üöÄ LangSwarm Optional Dependencies Test Suite")
    print("=" * 60)
    print("This test demonstrates how LangSwarm handles optional dependencies")
    print("gracefully, providing helpful error messages when dependencies are missing.")
    print()
    
    # Run tests
    test_optional_import_manager()
    test_provider_registry()
    test_memory_backends()
    test_configuration_with_missing_deps()
    test_minimal_functionality()
    show_installation_guidance()
    
    print("\n" + "=" * 60)
    print("‚úÖ Optional Dependencies Test Suite Complete!")
    print("=" * 60)
    print("\nKey Benefits Demonstrated:")
    print("‚Ä¢ Graceful degradation when dependencies are missing")
    print("‚Ä¢ Clear, actionable error messages with installation commands")
    print("‚Ä¢ Minimal core that works without heavy dependencies")
    print("‚Ä¢ Flexible installation options for different use cases")
    print("‚Ä¢ Automatic discovery of available features")


if __name__ == "__main__":
    main()