"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[26],{3757:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"Memory/native-adapters","title":"LangSwarm Database Adapters Documentation","description":"LangSwarm provides several native database adapters that enable structured storage and retrieval of documents. These adapters facilitate efficient interaction with various types of databases, each optimized for different use cases.","source":"@site/docs/Memory/native-adapters.md","sourceDirName":"Memory","slug":"/Memory/native-adapters","permalink":"/LangSwarm/Memory/native-adapters","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"LangSwarmMemoryLLM","permalink":"/LangSwarm/Memory/memory-llm"},"next":{"title":"LangSwarmAggregationTool","permalink":"/LangSwarm/Tools/aggregation-tool"}}');var r=a(4848),s=a(8453);const d={},i="LangSwarm Database Adapters Documentation",c={},o=[{value:"Supported Database Adapters",id:"supported-database-adapters",level:2},{value:"Shared Interface for All Adapters",id:"shared-interface-for-all-adapters",level:3},{value:"1. SQLiteAdapter",id:"1-sqliteadapter",level:3},{value:"2. RedisAdapter",id:"2-redisadapter",level:3},{value:"3. ChromaDBAdapter",id:"3-chromadbadapter",level:3},{value:"4. GCSAdapter",id:"4-gcsadapter",level:3},{value:"5. ElasticsearchAdapter",id:"5-elasticsearchadapter",level:3}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"langswarm-database-adapters-documentation",children:"LangSwarm Database Adapters Documentation"})}),"\n",(0,r.jsx)(t.p,{children:"LangSwarm provides several native database adapters that enable structured storage and retrieval of documents. These adapters facilitate efficient interaction with various types of databases, each optimized for different use cases."}),"\n",(0,r.jsx)(t.h2,{id:"supported-database-adapters",children:"Supported Database Adapters"}),"\n",(0,r.jsx)(t.h3,{id:"shared-interface-for-all-adapters",children:"Shared Interface for All Adapters"}),"\n",(0,r.jsx)(t.p,{children:"All database adapters in LangSwarm are designed to implement a consistent interface. This modular approach allows developers to easily switch between different database backends without changing the application logic. Each adapter supports the following core methods:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"add_documents(documents: List[Dict])"})}),": Adds a list of documents to the database."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"query(query: str, filters: Optional[Dict] = None)"})}),": Retrieves documents based on the provided query and optional metadata filters."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"delete(document_ids: List[str])"})}),": Deletes documents from the database by their IDs."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"run(payload: Dict, action: str)"})}),": Executes the specified action (query, add_documents, delete) with the provided payload."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"1-sqliteadapter",children:"1. SQLiteAdapter"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Description"}),": A lightweight document store for managing structured text retrieval using SQLite."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Features"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Efficient storage and retrieval of text documents."}),"\n",(0,r.jsx)(t.li,{children:"SQL-based keyword searches with metadata filtering."}),"\n",(0,r.jsx)(t.li,{children:"Operations for adding, querying, and deleting documents."}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Usage"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# Initialize the SQLite adapter\nsqlite_adapter = SQLiteAdapter(identifier="sqlite_memory")\n\n# Add documents\nsqlite_adapter.add_documents([\n    {"key": "doc1", "text": "This is a sample document.", "metadata": {"author": "John Doe"}},\n    {"key": "doc2", "text": "Another document with more content.", "metadata": {"author": "Jane Doe"}}\n])\n\n# Query documents\nresults = sqlite_adapter.query(query="sample", filters={"author": "John Doe"})\nprint(results)\n\n# Delete documents\nsqlite_adapter.delete(document_ids=["doc1"])\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"2-redisadapter",children:"2. RedisAdapter"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Description"}),": A fast key-value document store for structured retrieval using Redis."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Features"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Supports keyword-based searching and metadata filtering."}),"\n",(0,r.jsx)(t.li,{children:"Quick access to documents for real-time applications."}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Usage"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# Initialize the Redis adapter\nredis_adapter = RedisAdapter(identifier="redis_memory")\n\n# Add documents\nredis_adapter.add_documents([\n    {"key": "feedback1", "text": "Great service!", "metadata": {"user": "customer1"}},\n    {"key": "feedback2", "text": "Could be better.", "metadata": {"user": "customer2"}}\n])\n\n# Query documents\nresults = redis_adapter.query(query="great")\nprint(results)\n\n# Delete documents\nredis_adapter.delete(document_ids=["feedback1"])\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"3-chromadbadapter",children:"3. ChromaDBAdapter"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Description"}),": A high-performance vector database adapter for semantic search using ChromaDB."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Features"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Store and retrieve vector-embedded documents."}),"\n",(0,r.jsx)(t.li,{children:"Perform semantic and metadata-based searches."}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Usage"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# Initialize the ChromaDB adapter\nchromadb_adapter = ChromaDBAdapter(identifier="chromadb_memory")\n\n# Add documents\nchromadb_adapter.add_documents([\n    {"key": "research1", "text": "Quantum computing advances.", "metadata": {"field": "science"}},\n    {"key": "research2", "text": "AI in healthcare.", "metadata": {"field": "health"}}\n])\n\n# Query documents\nresults = chromadb_adapter.query(query="quantum", filters={"field": "science"})\nprint(results)\n\n# Delete documents\nchromadb_adapter.delete(document_ids=["research1"])\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"4-gcsadapter",children:"4. GCSAdapter"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Description"}),": A Google Cloud Storage adapter for document storage and retrieval."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Features"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Store and retrieve textual data in GCS."}),"\n",(0,r.jsx)(t.li,{children:"Metadata-based filtering for improved query results."}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Usage"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# Initialize the GCS adapter\ngcs_adapter = GCSAdapter(identifier="gcs_memory", bucket_name="my_bucket")\n\n# Add documents\ngcs_adapter.add_documents([\n    {"key": "report1", "text": "Annual financial report.", "metadata": {"year": "2022"}},\n    {"key": "report2", "text": "Quarterly earnings.", "metadata": {"year": "2023"}}\n])\n\n# Query documents\nresults = gcs_adapter.query(query="financial")\nprint(results)\n\n# Delete documents\ngcs_adapter.delete(document_ids=["report1"])\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"5-elasticsearchadapter",children:"5. ElasticsearchAdapter"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Description"}),": An Elasticsearch adapter for document storage and retrieval."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Features"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Full-text search and metadata-based filtering."}),"\n",(0,r.jsx)(t.li,{children:"Vector search capabilities for similarity matching."}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Usage"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# Initialize the Elasticsearch adapter\nes_adapter = ElasticsearchAdapter(identifier="es_memory", connection_string="http://localhost:9200")\n\n# Add documents\nes_adapter.add_documents([\n    {"text": "New innovations in AI.", "metadata": {"category": "technology"}},\n    {"text": "Climate change effects.", "metadata": {"category": "environment"}}\n])\n\n# Query documents\nresults = es_adapter.query(query="AI", filters={"category": "technology"})\nprint(results)\n\n# Delete documents\nes_adapter.delete(document_ids=["1"])\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>d,x:()=>i});var n=a(6540);const r={},s=n.createContext(r);function d(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);