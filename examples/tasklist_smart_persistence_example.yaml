# Tasklist MCP Tool - Smart Persistence Examples
# =================================================

version: "1.0"
project_name: "tasklist-smart-persistence-demo"

# === Example 1: Auto-Detection (Recommended) ===
# The tool automatically detects and uses available memory adapters
memory: production  # Uses BigQuery/Redis/SQLite based on environment

tools:
  - id: smart_tasklist
    type: mcptasklist  
    description: "Smart task management with auto-detected persistence"
    local_mode: true
    pattern: "intent"
    main_workflow: "use_tasklist_tool"
    # No additional config needed - auto-detects memory adapter

agents:
  - id: task_manager
    model: "gpt-4o"
    behavior: "helpful"
    tools: ["smart_tasklist"]

workflows:
  - steps:
      - agent: "task_manager"
        input: "${user_input}"

---

# === Example 2: BigQuery Persistence ===
# Explicitly configured for BigQuery storage
memory:
  backend: "bigquery"
  settings:
    project_id: "my-project"
    dataset_id: "task_management"
    table_id: "user_tasks"

tools:
  - id: bigquery_tasklist
    type: mcptasklist
    description: "Enterprise task management with BigQuery persistence"
    local_mode: true
    pattern: "intent"
    main_workflow: "use_tasklist_tool"
    # Uses the global memory configuration automatically

agents:
  - id: enterprise_task_manager
    model: "gpt-4o"
    behavior: "professional"
    tools: ["bigquery_tasklist"]

workflows:
  - steps:
      - agent: "enterprise_task_manager"
        input: "${user_input}"

---

# === Example 3: Development Mode ===
# Simple file storage for development
memory: false  # Disable memory adapters

tools:
  - id: dev_tasklist
    type: mcptasklist
    description: "Development task management with file storage"
    local_mode: true
    pattern: "intent"
    main_workflow: "use_tasklist_tool"
    # Will use JSON file storage automatically

agents:
  - id: dev_task_manager
    model: "gpt-4o-mini"
    behavior: "casual"
    tools: ["dev_tasklist"]

workflows:
  - steps:
      - agent: "dev_task_manager"
        input: "${user_input}"

---

# === Example 4: Redis High-Performance ===
# Redis for high-performance task management
memory:
  backend: "redis"
  settings:
    host: "localhost"
    port: 6379
    db: 0

tools:
  - id: redis_tasklist
    type: mcptasklist
    description: "High-performance task management with Redis"
    local_mode: true
    pattern: "intent"
    main_workflow: "use_tasklist_tool"

agents:
  - id: fast_task_manager
    model: "gpt-4o"
    behavior: "efficient"
    tools: ["redis_tasklist"]

workflows:
  - steps:
      - agent: "fast_task_manager"
        input: "${user_input}"

---

# === Usage Examples ===

# Natural language task management:
# "Create a high-priority task for implementing user authentication"
# "Mark task-1 as completed" 
# "Show me all my current tasks"
# "Update task-2 to include testing requirements"
# "Delete the old documentation task"

# Direct API calls:
# {"method": "create_task", "params": {"description": "API docs", "priority": 1}}
# {"method": "list_tasks", "params": {}}
# {"method": "update_task", "params": {"task_id": "task-1", "completed": true}}

# === Environment Variables for Auto-Detection ===

# BigQuery:
# export GOOGLE_CLOUD_PROJECT="your-project-id"
# export GOOGLE_APPLICATION_CREDENTIALS="/path/to/credentials.json"

# Redis:
# export REDIS_URL="redis://localhost:6379"

# General:
# export LANGSWARM_MEMORY="production"