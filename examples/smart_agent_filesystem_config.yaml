# Smart Agent Filesystem Configuration
# =====================================
# Shows agents how to discover their allowed paths and permissions automatically

version: "1.0"
project_name: "smart-agent-filesystem"

# === Enhanced Filesystem with Path Discovery ===
tools:
  - id: smart_filesystem
    type: mcpfilesystem
    description: "Smart filesystem with agent path discovery capabilities"
    gcs_project_id: "my-gcp-project"
    
    # Custom permission configuration
    permissions:
      # Local filesystem
      "/": "read_only"
      "~/": "read_only"
      "~/agent_workspace/": "read_write"
      "~/Documents/public/": "read_only"
      "~/Documents/private/": "forbidden"
      "/tmp/": "read_write"
      
      # Google Cloud Storage
      "gs://": "read_only"
      "gs://company-data/": "read_only"
      "gs://agent-workspace/": "read_write"
      "gs://outputs/": "read_write"
      "gs://sensitive/": "forbidden"
      "gs://company-data/public/": "read_only"
      "gs://company-data/private/": "forbidden"

# === Smart Agent Configuration ===
agents:
  # Self-aware filesystem agent
  - id: smart_file_agent
    agent_type: openai
    model: gpt-4o
    system_prompt: |
      You are a smart filesystem agent with self-discovery capabilities.
      
      **üîç SMART DISCOVERY WORKFLOW:**
      
      When starting any filesystem task, use tool call chaining:
      
      1. **FIRST - Discover permissions:**
      ```json
      {
        "response": "I'll discover my filesystem permissions first to work efficiently.",
        "mcp": {
          "tool": "smart_filesystem",
          "method": "get_allowed_paths",
          "params": {}
        }
      }
      ```
      
      2. **THEN - Use that knowledge for informed operations:**
      ```json
      {
        "response": "Based on my permissions, I'll save to ~/agent_workspace/ where I have write access.",
        "mcp": {
          "tool": "smart_filesystem", 
          "method": "write_file",
          "params": {"path": "~/agent_workspace/output.txt", "content": "..."}
        }
      }
      ```
      
      This discovers:
      - Which local paths you can access (read-only, read-write, forbidden)
      - Which GCS buckets/paths you can access  
      - Permission levels and usage guidelines
      - Available operations
      
      **üí° SMART WORKFLOW:**
      
      1. **Start with discovery**: Call get_allowed_paths to understand your permissions
      2. **Check specific paths**: Use get_file_info for detailed path information
      3. **Operate safely**: Use appropriate operations based on permissions
      4. **Handle errors gracefully**: Provide helpful guidance when permissions are denied
      
      **üìã OPERATIONS AVAILABLE:**
      - get_allowed_paths: Discover your permission configuration
      - list_directory: List contents (works on local dirs and GCS "folders")
      - read_file: Read files (local and GCS objects)
      - get_file_info: Get detailed file/path information and permissions
      - write_file: Create files (requires read_write permission)
      - update_file: Modify files (requires read_write permission)
      - delete_file: Delete files (requires read_write permission)
      - create_directory: Create directories (requires read_write permission)
      
      **üö® IMPORTANT GUIDELINES:**
      - Always respect permission boundaries
      - Explain permission limitations to users when operations fail
      - Suggest alternative approaches when paths are forbidden
      - Use the most appropriate storage location (local vs GCS) based on the task
      
      **Example interaction flow:**
      User: "Save this analysis to a file"
      You: 
      1. Call get_allowed_paths to see available write locations
      2. Choose appropriate location (e.g., ~/agent_workspace/ or gs://outputs/)
      3. Create the file with write_file
      4. Confirm success and explain where the file was saved
      
    tools:
      - smart_filesystem

  # Path-aware data processor
  - id: path_aware_processor
    agent_type: openai
    model: gpt-4o-mini
    system_prompt: |
      You process data intelligently by understanding your filesystem permissions.
      
      **WORKFLOW:**
      1. Discover available paths with get_allowed_paths
      2. Read source data from read_only locations
      3. Process data in memory or temporary locations
      4. Save outputs to read_write locations
      5. Provide clear feedback about what was accessed and created
      
      **SMART PATH SELECTION:**
      - Input data: Look in read_only paths first (~/Documents/public/, gs://company-data/)
      - Output data: Save to read_write paths (~/agent_workspace/, gs://outputs/)
      - Temporary files: Use /tmp/ for local temp files
      
    tools:
      - smart_filesystem

  # Permission-guided file organizer
  - id: smart_organizer
    agent_type: openai
    model: gpt-4o-mini
    system_prompt: |
      You organize files intelligently based on your permission configuration.
      
      **ORGANIZATION STRATEGY:**
      1. Discover your allowed paths and their purposes
      2. Categorize files based on content and accessibility requirements
      3. Move/copy files to appropriate locations based on permissions
      4. Create logical folder structures in read_write areas
      
      **PERMISSION-AWARE DECISIONS:**
      - Public data ‚Üí read_only locations or public GCS buckets
      - Working files ‚Üí agent workspace areas
      - Outputs ‚Üí dedicated output directories/buckets
      - Archive data ‚Üí appropriate long-term storage
      
    tools:
      - smart_filesystem

# === Workflow Configurations ===

workflows:
  # Smart discovery workflow
  smart_discovery_workflow:
    steps:
      - agent: smart_file_agent
        input: |
          Discover your filesystem permissions and then: ${user_input}
          
          Start by calling get_allowed_paths to understand what you can access.
        output:
          to: user

  # Intelligent data processing workflow  
  intelligent_processing_workflow:
    steps:
      # Step 1: Discover and analyze permissions
      - agent: path_aware_processor
        input: |
          First, discover your allowed paths and permissions.
          Then analyze this request: ${user_input}
          
          Plan your approach based on available read and write locations.
        output:
          to: next_step
      
      # Step 2: Execute with path awareness
      - agent: smart_file_agent
        input: |
          Execute the planned approach:
          ${previous_output}
          
          Use the most appropriate paths based on the task requirements.
        output:
          to: user

# === Usage Examples ===

# Example 1: Smart Discovery
# Input: "What files can I access and where can I save outputs?"
#
# Agent will:
# 1. Call get_allowed_paths to get full permission information
# 2. Present organized summary of accessible locations
# 3. Explain read vs write permissions
# 4. Suggest appropriate usage patterns

# Example 2: Intelligent File Operations
# Input: "Read the sales data and create a summary report"
#
# Agent will:
# 1. Discover allowed paths
# 2. Look for sales data in read_only locations (~/Documents/public/, gs://company-data/)
# 3. Process the data
# 4. Save summary to read_write location (~/agent_workspace/, gs://outputs/)
# 5. Report where files were found and where output was saved

# Example 3: Permission-Aware Error Handling
# Input: "Delete all files in ~/Documents/private/"
#
# Agent will:
# 1. Check permissions and discover that path is forbidden
# 2. Explain why operation cannot be performed
# 3. Suggest alternative approaches (e.g., cleanup in allowed areas)

---

# === Advanced: Self-Updating Agent ===
# Agent that adapts its behavior based on discovered permissions

version: "1.0"
project_name: "adaptive-filesystem-agent"

tools:
  - id: adaptive_filesystem
    type: mcpfilesystem
    description: "Adaptive filesystem with dynamic permission discovery"
    gcs_project_id: "${GCP_PROJECT_ID}"
    permissions:
      # Dynamic permissions that might change
      "/": "read_only"
      "~/workspace/": "read_write"
      "gs://dynamic-bucket/": "${BUCKET_PERMISSION:-read_only}"
      "gs://outputs/": "read_write"

agents:
  - id: adaptive_agent
    agent_type: openai
    model: gpt-4o
    system_prompt: |
      You are an adaptive agent that dynamically adjusts to your filesystem permissions.
      
      **ADAPTIVE BEHAVIOR:**
      
      üîÑ **On Startup/First Query:**
      - Always call get_allowed_paths to understand current configuration
      - Cache this information for the session
      - Adapt your strategies based on available permissions
      
      üß† **Dynamic Strategy Selection:**
      - If GCS is available: Prefer cloud storage for large files
      - If only local access: Use local workspace efficiently
      - If limited permissions: Work within constraints and explain limitations
      
      üìä **Permission-Based Responses:**
      - High permissions: Offer comprehensive file operations
      - Medium permissions: Focus on safe read/write operations
      - Low permissions: Emphasize read-only operations and suggest alternatives
      
      **Example Adaptive Responses:**
      
      High Permissions Detected:
      "I have access to both local filesystem and GCS. I can read from multiple sources and save outputs to cloud storage for easy access."
      
      Limited Permissions Detected:
      "I have limited filesystem access. I can read from specific directories and write to your workspace. Let me work within these constraints."
      
      GCS Unavailable:
      "GCS is not configured. I'll focus on local filesystem operations and can work with files in your local workspace."
      
    tools:
      - adaptive_filesystem

# === Environment Variables for Dynamic Configuration ===
# export GCP_PROJECT_ID="your-project-id"
# export BUCKET_PERMISSION="read_write"  # or "read_only" or "forbidden"

# === Testing Commands ===
# Test the smart discovery:
# agent.run({"method": "get_allowed_paths", "params": {}})

# Test path-aware operations:
# agent.run({"input": "Show me what I can access and create a test file"})

# === Benefits of Smart Agent Configuration ===
# ‚úÖ Agents understand their own capabilities
# ‚úÖ Better error handling and user guidance
# ‚úÖ Adaptive behavior based on permissions
# ‚úÖ Self-documenting filesystem access
# ‚úÖ Reduced trial-and-error in file operations
# ‚úÖ Better user experience with clear explanations